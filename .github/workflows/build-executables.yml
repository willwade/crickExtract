name: Build and Release Executables

on:
  push:
    branches:
      - main  # Trigger on commits to the main branch

jobs:
  versioning:
    runs-on: macos-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.x"

    - name: Determine Version
      id: version
      shell: bash
      run: |
        if echo "${{ github.event.head_commit.message }}" | grep -q 'MAJOR'; then
            echo "version_type=MAJOR" >> $GITHUB_ENV
        elif echo "${{ github.event.head_commit.message }}" | grep -q 'MINOR'; then
            echo "version_type=MINOR" >> $GITHUB_ENV
        elif echo "${{ github.event.head_commit.message }}" | grep -q 'PATCH'; then
            echo "version_type=PATCH" >> $GITHUB_ENV
        else
            echo "No valid version type found in commit message."
            exit 1
        fi

    - name: Increment Version
      id: increment_version
      shell: bash
      run: |
        version=$(cat VERSION || echo "0.0.0")
        major=$(echo $version | cut -d. -f1)
        minor=$(echo $version | cut -d. -f2)
        patch=$(echo $version | cut -d. -f3)

        case "${{ env.version_type }}" in
          MAJOR) major=$((major + 1)); minor=0; patch=0 ;;
          MINOR) minor=$((minor + 1)); patch=0 ;;
          PATCH) patch=$((patch + 1)) ;;
        esac

        new_version="${major}.${minor}.${patch}"
        echo "new_version=${new_version}" >> $GITHUB_ENV
        echo $new_version > VERSION

    - name: Commit and Tag New Version
      run: |
        git config user.name "GitHub Actions"
        git config user.email "actions@github.com"
        git add VERSION
        git commit -m "Bump version to ${{ env.new_version }}"
        git tag v${{ env.new_version }}
        git push origin main
        git push origin v${{ env.new_version }}

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.MY_PAT }}
      with:
        tag_name: v${{ env.new_version }}
        release_name: Release v${{ env.new_version }}
        draft: false
        prerelease: false

  build:
    needs: versioning  # Ensures this job runs after versioning
    strategy:
      matrix:
        os: [windows-latest, macos-latest]  # Build on Windows and macOS
    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.x"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Build Executable
      run: |
        pyinstaller --onefile extract_clicker_media.py

    - name: Verify File Names
      run: |
        echo "Files in dist/:"
        ls -l dist/

    - name: Upload Release Assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.MY_PAT }}
      with:
        upload_url: ${{ needs.versioning.outputs.upload_url }}
        asset_path: dist/extract_clicker_media${{ matrix.os == 'windows-latest' && '.exe' || '' }}
        asset_name: ${{ matrix.os == 'windows-latest' && 'extract_clicker_media.exe' || 'extract_clicker_media' }}
        asset_content_type: application/octet-stream